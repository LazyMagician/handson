Adapter design pattern
----------------------

What?
-----
Two incompatible interfaces or systems can cooperate by using the 
adapter design pattern, a structural design pattern. Because of 
incompatible interfaces, it serves as a bridge between two classes
that would not otherwise be able to communicate.
The adapter approach is very helpful when attempting to incorporate 
third-party libraries or legacy code into a new system. 


Components:
----------
1. Target Interface: Defines the interface expected by the client.
    It represents the set of operations that the client code can use. 
    It’s the common interface that the client code interacts with.
    
2. Adaptee: The existing class or system with an incompatible interface 
   that needs to be integrated into the new system. It’s the class or system that
   the client code cannot directly use due to interface mismatches.

3. Adapter: A class that implements the target interface and internally
    uses an instance of the adaptee to make it compatible with the target interface.
    It acts as a bridge, adapting the interface of the adaptee to match the target interface.

4. Client: The code that uses the target interface to interact with objects.
   It remains unaware of the specific implementation details of the adaptee and the adapter. 
   It’s the code that benefits from the integration of the adaptee into the system
   through the adapter.
   
   
Different implementations ***
-------------------------
1. Class Adapter (Inheritance-based)

    In this approach, the adapter class inherits from both the target interface
    (the one the client expects) and the adaptee (the existing class needing adaptation).
    Programming languages that allow multiple inheritance, like C++, are more likely
    to use this technique.
    However, in languages like Java and C#, which do not support multiple inheritance, 
    this approach is less frequently used.
    
2.  Object Adapter (Composition-based)

    The object adapter employs composition instead of inheritance. 
    In this implementation, the adapter holds an instance of the adaptee and 
    implements the target interface.
    This approach is more flexible as it allows a single adapter to work with 
    multiple adaptees and does not require the complexities of inheritance.
    The object adapter is widely used in languages like Java and C#.


3. Two-way Adapter

    A two-way adapter can function as both a target and an adaptee,
    depending on which interface is being invoked.
    This type of adapter is particularly useful when two systems 
    need to work together and require mutual adaptation.
    
4. Interface Adapter (Default Adapter)

    When only a few methods from an interface are necessary, an interface adapter 
    can be employed.
    This is especially useful in cases where the interface contains many methods, 
    and the adapter provides default implementations for those that are not needed.
    This approach is often seen in languages like Java, where abstract classes or 
    default method implementations in interfaces simplify the implementation process.
    
    

How Adapter Design Pattern works?
---------------------------------
Below is how adapter design pattern works:

Step 1: The client initiates a request by calling a method on the adapter 
        via the target interface.
Step 2: The adapter maps or transforms the client’s request into a format that
        the adaptee can understand using the adaptee’s interface.
Step 3: The adaptee does the actual job based on the translated request from the adapter.
Step 4: The client receives the results of the call, remaining unaware of the 
        adapter’s presence or the specific details of the adaptee.
