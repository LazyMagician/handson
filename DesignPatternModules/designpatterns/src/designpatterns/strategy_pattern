Strategy Design Pattern
-----------------------


what?
-----
-> The Strategy Design Pattern is a behavioral design pattern that allows you to define a family of algorithms or behaviors, put each of them in a separate class, and
 make them interchangeable at runtime. This pattern is useful when you want to dynamically change the behavior of a class without modifying its code.
 

Characteristics
---------------
1. Defines a family of algorithms
2.Encapsulates behaviors
3. Enables dynamic behavior switching
4.Promotes object collaboration


components
----------
1. Context
* A class or object known as the Context assigns the task to a strategy object and contains a reference to it.
* It serves as an intermediary between the client and the strategy, offering an integrated approach for task execution without exposing 
  every detail of the process. 


2. Strategy Interface
* An abstract class or interface known as the Strategy Interface specifies a set of methods that all concrete strategies must implement.
* As a kind of agreement, it guarantees that all strategies follow the same set of rules and are interchangeable by the Context.
* The Strategy Interface promotes flexibility and modularity in the design by establishing a common interface that enables decoupling between
  the Context and the specific strategies.


3. Concrete Strategies
* Concrete Strategies are the various implementations of the Strategy Interface. Each concrete strategy provides a specific algorithm or behavior
  for performing the task defined by the Strategy Interface. 
* Concrete strategies encapsulate the details of their respective algorithms and provide a method for executing the task. 
* They are interchangeable and can be selected and configured by the client based on the requirements of the task.


4. Client 
* The Client is responsible for selecting and configuring the appropriate strategy and providing it to the Context. 
* It knows the requirements of the task and decides which strategy to use based on those requirements. 
* The client creates an instance of the desired concrete strategy and passes it to the Context, enabling the Context 
to use the selected strategy to perform the task.


when?
-----
Multiple Algorithms, Encapsulating Algorithms, Runtime Selection, Reducing Conditional Statements, Testing and Extensibility

when not to use?
---------------
Single Algorithm, Overhead, Inflexible Context