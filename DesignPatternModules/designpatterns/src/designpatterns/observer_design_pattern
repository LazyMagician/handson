Observer Design Pattern
-----------------------

What?
-----
* It is a behavioral design pattern that defines one to many dependency between objects
* When one object (the subject) changes a state, all its dependent (observer) are notified and updated automatically
* It primarily deals with the interaction and communication between objects. Specifically focusing on how objects behave  
  in response to change in state of other objects
  
Key Points
----------
1. Defines how set of objects (observer) interact based on change in subject
2. Observers react to change in subject's state
3. Subject doesn't need to know specific classes of its observer allowing more flexibility 
4. Observers can be easily added or removed dynamically without affecting the subject code

Components
----------
1. Subject:
	The subject maintains a list of observers (subscribers or listeners).
    It Provides methods to register and unregister observers dynamically and defines a method to notify observers of changes in its state.

2. Observer:
    Observer defines an interface with an update method that concrete observers must implement and 
    ensures a common or consistent way for concrete observers to receive updates from the subject.

3. ConcreteSubject:
    ConcreteSubjects are specific implementations of the subject. They hold the actual state or data that observers want to track.
    When this state changes, concrete subjects notify their observers.
    For instance, if a weather station is the subject, specific weather stations in different locations would be concrete subjects.

4. ConcreteObserver:
    Concrete Observer implements the observer interface. They register with a concrete subject and react when notified of a state change.
    When the subject’s state changes, the concrete observer’s update() method is invoked, allowing it to take appropriate actions.
    For example, a weather app on your smartphone is a concrete observer that reacts to changes from a weather station.
    

when?
----
1. When you need one object to notify multiple others about changes.
2. When you want to keep objects loosely connected, so they don’t rely on each other’s details.
3. When you want observers to automatically respond to changes in the subject’s state.
4. When you want to easily add or remove observers without changing the main subject.
5. When you’re dealing with event systems that require various components to react without direct connections.


when not to?
------------
1. When the relationships between objects are simple and don’t require notifications.
2. When performance is a concern, as many observers can lead to overhead during updates.
3. When the subject and observers are tightly coupled, as it defeats the purpose of decoupling.
4. When number of observers is fixed and won’t change over time.
5. When the order of notifications is crucial, as observers may be notified in an unpredictable sequence.
